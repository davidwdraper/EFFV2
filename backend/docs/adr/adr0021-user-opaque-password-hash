adr0021-user-opaque-password-hash

# ADR-0021 — User Treats Password Hash as Opaque

## Context

In early refactors, the `user.base.controller.ts` implemented a hardcoded validation rule that rejected any `hashedPassword` not starting with `"mock-hash::"`. This tied the User service to Auth’s hashing implementation and violated NowVibin’s **thin controller** and **canonical contracts** principles.

Per SOP:

- Controllers must remain transport-thin (Validate → DTO → Repo → Return Domain).
- All validation rules belong in **shared Zod contracts**.
- The **Auth service** owns password policy and hashing logic.
- The **User service** simply stores and retrieves whatever hash Auth provides.

The base controller check caused 400 errors (“hashedPassword must be a mock hash”) even for legitimate payloads and blocked smoke test #8 (gateway → auth → user → delete flow).

## Decision

The **User service will treat `hashedPassword` as an opaque string**.  
It will only enforce that the field is a non-empty string, not how it was generated.

Validation moves to shared contracts:

```ts
hashedPassword: z.string().min(1, "hashedPassword is required");
```
