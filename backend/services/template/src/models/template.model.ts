// backend/services/template/src/models/template.model.ts
import mongoose, { Schema, Document, Model, Types } from "mongoose";
import type { TemplateDomain } from "@shared/src/contracts/template.contract";

/**
 * Mongoose schema matching templateContract.
 * _id is generated by Mongo (ObjectId). No manual defaults.
 */

export interface TemplateDoc extends Document, Omit<TemplateDomain, "_id"> {
  _id: Types.ObjectId;
}

const templateSchema = new Schema<TemplateDoc>(
  {
    firstname: { type: String, required: true, index: true },
    lastname: { type: String, required: true, index: true },
    email: { type: String, required: true, index: true },

    userCreateId: { type: String, required: true, index: true },
    userOwnerId: { type: String, required: true, index: true },

    dateCreated: { type: Date, required: true },
    dateLastUpdated: { type: Date, required: true },
  },
  { collection: "templates", timestamps: false }
);

// SOP: disable buffering so errors surface immediately
mongoose.set("bufferCommands", false);

// Explicit unique email to avoid duplicates
templateSchema.index({ email: 1 }, { unique: true });

export const TemplateModel: Model<TemplateDoc> =
  mongoose.models.Template ||
  mongoose.model<TemplateDoc>("Template", templateSchema);
