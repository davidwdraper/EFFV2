// backend/services/audit/src/models/audit.model.ts
import mongoose, { Schema, Document, Model, Types } from "mongoose";
import type { AuditDomain } from "@shared/contracts/audit.contract";

/**
 * Mongoose schema matching auditContract.
 * _id is generated by Mongo (ObjectId). No manual defaults.
 */

export interface AuditDoc extends Document, Omit<AuditDomain, "_id"> {
  _id: Types.ObjectId;
}

const auditSchema = new Schema<AuditDoc>(
  {
    firstname: { type: String, required: true, index: true },
    lastname:  { type: String, required: true, index: true },
    email:     { type: String, required: true, index: true },

    userCreateId: { type: String, required: true, index: true },
    userOwnerId:  { type: String, required: true, index: true },

    dateCreated:     { type: Date, required: true },
    dateLastUpdated: { type: Date, required: true },
  },
  { collection: "audits", timestamps: false }
);

// SOP: disable buffering so errors surface immediately
mongoose.set("bufferCommands", false);

// Explicit unique email to avoid duplicates
auditSchema.index({ email: 1 }, { unique: true });

export const AuditModel: Model<AuditDoc> =
  mongoose.models.Audit || mongoose.model<AuditDoc>("Audit", auditSchema);
